#+title: LKMP Getting Started

I was selected for LKMP Fall 2025! This is where I'll document the debugging tools and workflow I'm learning. Will update as I go.

* Baby Steps

My goal: Find and fix a syzbot bug. Any subsystem, just want to get started.

** Typical Workflow

From the mentorship videos, here's the basic process:

1. Build kernel with ~CONFIG_DEBUG_INFO=y CONFIG_FRAME_POINTER=y~
2. Boot QEMU with ~-s -S~ and ~nokaslr ftrace_dump_on_oops~
3. Attach GDB: ~gdb vmlinux~, ~target remote :1234~, set breakpoints
4. Trace with ~trace-cmd record ...~ then ~trace-cmd report~
5. Check scheduling: ~perf sched record~, ~perf sched latency sort max~
6. Enable watchdogs & hung task detectors
7. Add ~trace_printk()~ in suspected code paths
8. For crashes: use kdump + crash tool

Starting with GDB first.

* Debugging Tools

** Core Debugging

*QEMU*
- Run custom kernels safely
- Basic usage:
  #+begin_src bash
  qemu-system-x86_64 -kernel bzImage -append "console=ttyS0 root=/dev/sda nokaslr" -s -S -nographic
  #+end_src
- ~-s -S~ = GDB server on port 1234, wait for attach

*GDB*
- Debug kernel in QEMU
- Common commands: ~target remote :1234~, ~bt~, ~info threads~, ~b panic~, ~list~

*KGDB*
- GDB for real hardware (serial/network)

*JTAG*
- For early boot problems

** Tracing

*Ftrace*
- Built-in kernel tracer
- Boot params: ~ftrace_dump_on_oops~, ~traceoff_on_warning~, ~panic_on_warn=1~

*trace-cmd*
- Ftrace frontend
  #+begin_src bash
  trace-cmd record -p function_graph -g kfree
  trace-cmd report
  #+end_src

*perf*
- Scheduler analysis
  #+begin_src bash
  perf sched record -- sleep 10
  perf sched latency sort max
  perf script
  #+end_src

** Detectors

*Lockup Watchdogs*
- Catch hung CPUs
- ~nmi_watchdog=1 watchdog_thresh=2~

*Hung Task Detector*
- Find stuck processes
- ~echo 10 > /proc/sys/kernel/hung_task_timeout_secs~

*RCU Stall Detector*
- RCU problems
- ~rcupdate.rcu_cpu_stall_timeout=20~

** Sanitizers

- KASAN - memory bugs (use-after-free, out-of-bounds)
- KCSAN - data races
- LOCKDEP - locking bugs

** Post-Mortem

*kdump/crash*
- Capture and analyze kernel crashes
- Critical for production systems

*SysRq*
- Emergency debugging keys

** Logging

*printk*
#+begin_src c
printk(KERN_DEBUG "value=%d\n", value);
#+end_src

*trace_printk*
#+begin_src c
trace_printk("value=%d\n", value);  // Lower overhead
#+end_src

* Required Config

Kernel:
- ~CONFIG_DEBUG_INFO=y~
- ~CONFIG_FRAME_POINTER=y~
- ~CONFIG_GDB_SCRIPTS=y~

Boot params:
- ~nokaslr~
- ~panic_on_warn=1~
- ~traceoff_on_warning~
- ~ftrace_dump_on_oops~

* TODO
- [ ] Setup QEMU environment
- [ ] Build debug kernel
- [ ] Pick first syzbot bug
- [ ] Document the fix
- [ ] Submit patch

* Links
- https://docs.kernel.org/dev-tools/
- https://syzkaller.appspot.com/
- https://kernelnewbies.org/